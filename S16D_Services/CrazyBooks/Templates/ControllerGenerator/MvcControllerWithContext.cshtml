@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using System.Collections.Generic;
@using System.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @namespaceName;
    }
}

namespace @Model.ControllerNamespace
{
@{
    string routePrefix;
    if (String.IsNullOrEmpty(Model.AreaName))
    {
        routePrefix = Model.ControllerRootName;
    }
    else
    {
        routePrefix = Model.AreaName + "/" + Model.ControllerRootName;
    }
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var serviceInterfaceName = "I" + entitySetName + "Service";
    var serviceVariableName = entitySetName.ToLower() + "Svc";
    var servicePropertyName = "_" + serviceVariableName;
    var entitySetVar = Model.EntitySetVariable ??
        (String.IsNullOrEmpty(entitySetName)
            ? entitySetName
            : (entitySetName.Substring(0, length: 1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;

    if (!string.IsNullOrEmpty(Model.AreaName))
    {
    @:@string.Format("[Area(\"{0}\")]", Model.AreaName)
    }
}
    public class @Model.ControllerName : Controller
    {
        private readonly @serviceInterfaceName @servicePropertyName;

        public @(Model.ControllerName)(@serviceInterfaceName @serviceVariableName)
        {
            @servicePropertyName = @serviceVariableName;
        }

        // GET: @routePrefix
@{
        @:public async Task<IActionResult> Index()
        @:{
            @:return View(await @(servicePropertyName).GetIndexData());
}        }

        // GET: @routePrefix/Details/5
        public async Task<IActionResult> Details(@primaryKeyNullableTypeName id)
        {
            if (id == null || !@(servicePropertyName).Exists((int)id))
            {
                return NotFound();
            }

            return View("Display", await @(servicePropertyName).GetDisplayData(ControllerAction.Details, (int)id));
        }

        // GET: @routePrefix/Upsert/5
        public async Task<IActionResult> Upsert(@primaryKeyNullableTypeName id)
        {    
            if (id != null && !@(servicePropertyName).Exists((int)id))
            {
                return NotFound();
            }

            return View(await @(servicePropertyName).GetUpsertData(id == null ? ControllerAction.Create : ControllerAction.Edit, id));
        }

        // POST: @routePrefix/Upsert
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Upsert(@(entitySetName)UpsertVM vm)
        {
            if(vm.IsCreate)
            {
                ModelState.Remove("@(Model.ModelTypeName).@primaryKeyName");
            }

            if (!ModelState.IsValid)
            {
                return View(@(servicePropertyName).GetUpsertData(vm.IsCreate ? ControllerAction.Create : ControllerAction.Edit, vm.@(Model.ModelTypeName)));
            }

            if (vm.IsCreate)
            {
                await @(servicePropertyName).Add(vm.@(Model.ModelTypeName));
            }
            else
            {
                if (!@(servicePropertyName).Exists(vm.@(Model.ModelTypeName).@primaryKeyName))
                {
                    return NotFound();
                }

                await @(servicePropertyName).Update(vm.@(Model.ModelTypeName));
            }

            return RedirectToAction(nameof(Index));
        }

        // GET: @routePrefix/Delete/5
        public async Task<IActionResult> Delete(@primaryKeyNullableTypeName id)
        {
            if (id == null || !@(servicePropertyName).Exists((int)id))
            {
                return NotFound();
            }

            return View("Display", await @(servicePropertyName).GetDisplayData(ControllerAction.Delete, (int)id));
        }

        // POST: @routePrefix/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(@primaryKeyShortTypeName id)
        {
            await @(servicePropertyName).Delete(id);

            return RedirectToAction(nameof(Index));
        }
    }
}
@functions
{
    // This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
    // sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (!Microsoft.VisualStudio.Web.CodeGeneration.Templating.TypeUtilities.IsNullable(primaryKeyType) || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }
}
